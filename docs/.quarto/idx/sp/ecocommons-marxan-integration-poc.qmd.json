{"title":"EcoCommons Marxan MaPP connection","markdown":{"yaml":{"title":"EcoCommons Marxan MaPP connection","format":{"html":{"embed-resources":true,"css":"ec_html_template.css"}},"editor":"visual","runtime":"shiny"},"headingText":"EcoCommons -\\> Marxan MaPP connection","containsRefs":false,"markdown":"\n\n\nAuthor: Zhao Xiang, EcoCommons\n\nDate: 2024-10-02\n\n![](images/EC_section_break.png){fig-align=\"center\"}\n\n## Introduction\n\nUsing the Species distribution modeling techniques provided by the EcoCommons Platform (www.ecocommons.org.au), we produced probability distribution maps for the three Queensland endangered species: koala, brush tailed rock-wallaby, and beach stone curlew.\n\nThen we adjusted the probability distribution maps of these three species with the planning units shapefile prepared by the Marxan MaPP, and ran four planning scenarios with a target of expanding the coverage of protected areas in QLD to 30%.\n\n## EcoCommons Outputs\n\n1.  Species records pulled from GBIF, ALA, EcoPlots, OBIS\n2.  Species distribution modelling output: [Species distribution Probability maps]{style=\"color:red;\"} (This is the input tested in this project).\n\n## **Marxan MaPP Inputs**\n\n1.  Shapefile of planning area and units.\n2.  Shapefile of cost.\n3.  Shapefile and csv of biodiversity features [(Where EcoCommons can help!)]{style=\"color:red;\"}.\n\n## EcoCommons connects with Marxan Showcase:\n\n**Make sure you are in the directory you want**\n\n```{r start}\n\ngetwd()\n\n\n# setwd(“/replace_this_with_your_actual_directory/ecocommons-marxan-integration-poc”)\n\n```\n\nActivate the virtual environment \"renv\" to install and load all essential packages\n\n```{r init-renv, message=FALSE, results='hide'}\n\n# install \"renv\" package if not been installed\nif (!requireNamespace(\"renv\", quietly = TRUE)) {\n  install.packages(\"renv\")\n}\n\nif (!file.exists(\"renv/activate.R\")) {\n   message(\"renv has not been initiated in this project. Initializing now...\")\n   renv::init()  # This initializes renv if it's not set up\n} else {\n   source(\"renv/activate.R\")  # This ensures the renv environment is activated\n   message(\"renv is activated.\")\n}\n\n# Ensure renv is installed and initialized\nif (file.exists(\"renv.lock\")) {\n  renv::restore()\n} else {\n  message(\"No renv.lock file found in the current directory.\")\n}\n\n```\n\n**Install and load essential packages**\n\n```{r Pack-install, message=FALSE, results='hide'}\n\n# Set CRAN mirror\noptions(repos = c(CRAN = \"https://cran.rstudio.com/\"))\n\n# First specify the packages of interest\npackages = c(\"shiny\", \"sf\", \"terra\", \"ggplot2\", \"ggspatial\", \"raster\", \"dplyr\", \"shiny\", \"httpuv\", \"rmarkdown\", \"knitr\", \"jsonlite\", \"reticulate\", \"htmltools\", \"pryr\")\n\n# Now load or install&load all. This process will take a long time since we are using a virtual environment and install a lot of packages.\npackage.check <- lapply(\n  packages,\n  FUN = function(x) {\n    if (!require(x, character.only = TRUE)) {\n      install.packages(x, dependencies = TRUE)\n      library(x, character.only = TRUE)\n     }\n  }\n )\n\n\nSys.setenv(PROJ_LIB = \"/usr/local/Cellar/proj/9.5.0/share/proj\")\n\nrenv::snapshot()\n\n```\n\n**1. We get the QLD planning units from Marxan MaPP**\n\n```{r Plan-units, message=FALSE, results='hide'}\n\nQLD_Unit <- \"qld_3species_Marxan/QLD_plannningunits/cost-surface-template.shp\"  #This cost-surface-template was prepared by the Marxan Mapp with a resolution of 189 Km2, which is the highest resolution Marxan Mapp can give at this scale.\n\nQLD_Unit  <- st_read(QLD_Unit)\nQLD_Unit  <- st_simplify(QLD_Unit , dTolerance = 0.01) \n\n\n# Calculate the resolution since Marxan MaPP for visulization purpose\nareas <- st_area(QLD_Unit)\nareas_numeric <- as.numeric(areas)\naverage_area <- mean(areas_numeric)\n\n# Convert to numeric\naverage_area_km2 <- average_area / 1e6\n\n# Get the number of rows\nn_rows <- nrow(QLD_Unit)\n\n# Plot the shapefile with no fill color and number of rows in the title\nggplot(data = QLD_Unit) +\n  geom_sf(fill = NA, color = \"gray\") +\n  theme_minimal() +\n  ggtitle(paste(\"QLD Planning Units:\", n_rows, \"\\n\",\n                \"Resolution of planning in square kilometers:\", round(average_area_km2)))+\n  theme(plot.title = element_text(hjust = 0.5))  # Center the title\n```\n\n**2. I made a cost layer using the reciprocal of the distance to state-owned road as a surrogate of the cost.**\n\nThe assumption is: the closer to the state owned road, the more expensive to purchase the unit.\n\n```{r cost, message=FALSE, results='hide'}\n\nQLD_cost_road <- st_read(\"qld_3species_Marxan/QLD_Cost/QLD_cost_road.shp\")\n\n# Plot the shapefile with continuous cost_road values\nggplot(QLD_cost_road) +\n  geom_sf(aes(fill = cost_road)) +\n  scale_fill_continuous(name = \"Cost\",\n                        low = \"lightblue\", high = \"red\",\n                        labels = c(\"0 (Low cost)\", \"1 (High cost)\"),\n                        breaks = c(0.01, 1)) +\n  theme_minimal() +\n  labs(title = \"Cost: using the distance to road of each Unit as a proxy\")+\n  theme(plot.title = element_text(hjust = 0.5))  # Center the title\n\n```\n\n**3. Biodiversity features. I used EcoCommons to produce three species' SDM to start with.**\n\n-   **Species 1: koala**\n\n-   **Species 2: brush tailed rock-wallaby**\n\n-   **Species 3: beach stone curlew**\n\n```{r ECR-sdms-raster, warning = FALSE, message=FALSE, results='hide'}\n\n# Define the folder path where the rasters are stored\nfolder_path <- \"qld_3species_Marxan/QLD_feature/\"\n\n# Get a list of all .tif files in the folder\nraster_files <- list.files(path = folder_path, pattern = \"\\\\.tif$\", full.names = TRUE)\n\n# Extract the species names from the file names (removing the folder path and .tif extension)\nspecies_names <- tools::file_path_sans_ext(basename(raster_files))\n\n# Read all raster files in one go using lapply\nraster_list <- lapply(raster_files, rast)  # Use rast() from terra for reading rasters\n\n# Using QLD_Unit as the spatial vector for masking\n\n# Transform the raster CRS to match the vector CRS and apply masking in one step\nraster_list <- lapply(raster_list, function(r) {\n  r_transformed <- project(r, crs(vect(QLD_Unit)))\n  mask(r_transformed, vect(QLD_Unit))\n})\n\n# Function to convert rasters to data frames and combine them\nprepare_raster_data <- function(raster_list, species_names) {\n\n  # Initialize an empty data frame\n  combined_df <- data.frame()\n  # Loop through each raster and combine them into one data frame\n  for (i in seq_along(raster_list)) {\n    # Convert raster to a data frame\n    raster_df <- as.data.frame(raster_list[[i]], xy = TRUE)\n    # Rename the third column to 'value' or any appropriate name for the raster values\n    names(raster_df)[3] <- \"value\"\n    # Add a column to identify the species name\n    raster_df$species <- species_names[i]\n    # Combine the raster data with the overall data frame\n    combined_df <- bind_rows(combined_df, raster_df)\n}\n  return(combined_df)\n}\n\n# Prepare the combined data frame\ncombined_raster_df <- prepare_raster_data(raster_list, species_names)\n\n# Create the ggplot with facet_wrap to display each raster in a separate facet\nggplot(combined_raster_df, aes(x = x, y = y, fill = value)) +  # Use the correct column name for fill\n  geom_raster()+\n  facet_wrap(~ species, ncol = 3) +  # Adjust ncol to control the number of columns\n  scale_fill_viridis_c() +  # You can adjust the color scale as needed\n  labs(title = \"Species SDM\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n```\n\n**4. We need to turn these SDMs to binary results (shapefies).**\n\n```{r threshold, warning = FALSE, message=FALSE, results='hide'}\n#| eval: false\n\n# Define the folder paths where the rasters and CSV files are stored\nfolder_path_rasters <- \"qld_3species_Marxan/QLD_feature/\"\nfolder_path_csvs <- \"qld_3species_Marxan/model_evaluation/\"\noutput_dir <- \"qld_3species_Marxan/QLD_feature/Marxan_feature_input/\"\n\nQLD_Unit <- \"qld_3species_Marxan/QLD_plannningunits/cost-surface-template.shp\"  #This cost-surface-template was prepared by the Marxan Mapp with a resolution of 189 Km2, which is the highest resolution Marxan Mapp can give at this scale.\n\nQLD_Unit  <- st_read(QLD_Unit)\nQLD_Unit  <- st_simplify(QLD_Unit , dTolerance = 0.01) \n\n\n# Get a list of all .tif files and CSV files in the folder\nraster_files <- list.files(path = folder_path_rasters, pattern = \"\\\\.tif$\", full.names = TRUE)\ncsv_files <- list.files(path = folder_path_csvs, pattern = \"\\\\.csv$\", full.names = TRUE)\n\n# Extract the species names from the file names (removing the folder path and .tif/.csv extension)\nspecies_names <- tools::file_path_sans_ext(basename(raster_files))\n\n# Read all raster files in one go using lapply\nraster_list <- lapply(raster_files, rast)  # Use rast() from terra for reading rasters\n\n# Transform the raster CRS to match the vector CRS and apply masking in one step\nraster_list <- lapply(raster_list, function(r) {\n  r_transformed <- project(r, crs(vect(QLD_Unit)))\n  mask(r_transformed, vect(QLD_Unit))\n})\n\n# Prepare a named list of rasters\nspecies_rasters <- setNames(raster_list, species_names)\nspecies_csvs <- setNames(csv_files, species_names)\n\n# Define UI for the application\nui <- fluidPage(\n  titlePanel(\"Interactive TSS-based threshold for the probability of presence and absence of Species\"),\n  \n  # Use a loop to create a row for each species\n  lapply(species_names, function(species) {\n    fluidRow(\n      column(3, \n             h4(paste(\"Species:\", species)),\n             sliderInput(paste0(\"tss_value_\", species), \n                         \"Select TSS Value:\", \n                         min = 0, max = 1, value = 0.5, step = 0.01),\n             actionButton(paste0(\"run_analysis_\", species), \"Run Species Analysis\"),\n             br(),\n             textOutput(paste0(\"tpr_tnr_\", species))\n      ),\n      \n      column(4, \n             plotOutput(paste0(\"plot_\", species), width = \"400px\")\n      ),\n      \n      column(5, \n             plotOutput(paste0(\"species_plot_\", species))\n      )\n    )\n  })\n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  \n  selected_raster <- function(species) {\n    species_rasters[[species]]\n  }\n  \n  species_eval_data <- function(species) {\n    csv_path <- species_csvs[[species]]\n    \n    if (!file.exists(csv_path)) {\n      showNotification(paste(\"CSV file for\", species, \"not found!\"), type = \"error\")\n      return(NULL)\n    }\n    \n    eval_data <- read.csv(csv_path)\n    \n    if (!all(c(\"tpr\", \"tnr\", \"tpv\") %in% names(eval_data))) {\n      showNotification(paste(\"Required columns missing in CSV for\", species), type = \"error\")\n      return(NULL)\n    }\n    \n    if (nrow(eval_data) == 0) {\n      showNotification(paste(\"No data found in CSV for\", species), type = \"error\")\n      return(NULL)\n    }\n    \n    eval_data$tss <- round(eval_data$tpr + eval_data$tnr - 1, 3)\n    return(eval_data)\n  }\n  \n  lapply(species_names, function(species) {\n    eval_data <- species_eval_data(species)\n    \n    if (!is.null(eval_data)) {\n      min_tss <- min(eval_data$tss, na.rm = TRUE)\n      max_tss <- max(eval_data$tss, na.rm = TRUE)\n      \n      updateSliderInput(session, paste0(\"tss_value_\", species), \n                        min = min_tss, \n                        max = max_tss, \n                        value = max_tss,\n                        step = 0.01)\n    }\n    \n    observeEvent(input[[paste0(\"tss_value_\", species)]], {\n      if (!is.null(eval_data)) {\n        row <- which.min(abs(eval_data$tss - input[[paste0(\"tss_value_\", species)]]))\n        \n        tpr <- eval_data$tpr[row]\n        tnr <- eval_data$tnr[row]\n        \n        output[[paste0(\"tpr_tnr_\", species)]] <- renderText({\n          paste0(\"TPR (Sensitivity): \", round(tpr, 3), \n                 \", TNR (Specificity): \", round(tnr, 3))\n        })\n      }\n    })\n    \n    output[[paste0(\"plot_\", species)]] <- renderPlot({\n      if (is.null(eval_data)) return(NULL)\n      \n      ggplot(eval_data, aes(x = tpv)) +\n        geom_line(aes(y = tpr, colour = \"TPR\"), linewidth = 1) +\n        geom_line(aes(y = tnr, colour = \"TNR\"), linewidth = 1) +\n        geom_line(aes(y = tss, colour = \"TSS\"), linewidth = 1) +\n        geom_vline(xintercept = eval_data$tpv[which.min(abs(eval_data$tss - input[[paste0(\"tss_value_\", species)]]))],\n                   linetype = \"dotted\", color = \"red\", linewidth = 1) +\n        labs(title = paste(\"Sensitivity, Specificity, and TSS for\", species),\n             x = \"Threshold Probability Value\",\n             y = \"Value\") +\n        scale_colour_manual(values = c(\"TPR\" = \"blue\", \"TNR\" = \"green\", \"TSS\" = \"red\")) +\n        theme_minimal()\n    })\n    \n    observeEvent(input[[paste0(\"run_analysis_\", species)]], {\n      species_shp <- process_species(selected_raster(species), QLD_Unit, species, output_dir, input[[paste0(\"tss_value_\", species)]])\n      \n      output[[paste0(\"species_plot_\", species)]] <- renderPlot({\n        ggplot() +\n          geom_sf(data = QLD_Unit, fill = NA, color = \"grey\") +\n          geom_sf(data = species_shp, aes(fill = feature), color = NA) +\n          scale_fill_viridis_c(option = \"plasma\") +\n          labs(title = paste(\"Species Distribution for\", species),\n               x = \"Longitude\", y = \"Latitude\") +\n          theme_minimal()\n      })\n    })\n  })\n}\n\nprocess_species <- function(raster_data, planning_unit, species_name, output_dir, tss_threshold) {\n  raster_data_transformed <- project(raster_data, crs(vect(planning_unit)))\n  extracted_values <- extract(raster_data_transformed, vect(planning_unit), fun = mean, na.rm = TRUE)\n  names(planning_unit)[names(planning_unit) == \"cost\"] <- \"feature\"\n  planning_unit$feature <- extracted_values[, 2]\n  \n  QLD_species <- subset(planning_unit, feature >= tss_threshold)\n  shapefile_base <- file.path(output_dir, species_name)\n  st_write(QLD_species, paste0(shapefile_base, \".shp\"), delete_layer = TRUE)\n  \n  return(QLD_species)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n```\n\n**5. Plot species SDM binary shapefile outputs for double check**\n\n```{r ECR-shp-plot, warning = FALSE, message=FALSE, results='hide'}\n\noutput_dir <- \"qld_3species_Marxan/QLD_feature/Marxan_feature_input/\"\n\n# List all the shapefiles in the directory (assuming each species has its own shapefile)\nspecies_files <- list.files(output_dir, pattern = \"\\\\.shp$\", full.names = TRUE)\n\nspecies_files\n\n# Extract species names from the filenames (you can adjust this depending on your naming conventions)\nspecies_names <- tools::file_path_sans_ext(basename(species_files))\n\n# Load all species shapefiles and add a species identifier\nspecies_sf_list <- lapply(seq_along(species_files), function(i) {\n  sf <- st_read(species_files[i])\n  sf$species <- species_names[i]  # Add species name column\n  return(sf)\n})\n\n# Combine all species into one dataset\ncombined_species_sf <- do.call(rbind, species_sf_list)\n\n# Plot the unit (base map) first and overlay the species habitats without borders\ncombined_plot_with_unit <- ggplot() +\n  geom_sf(data = QLD_Unit, fill = NA, color = \"grey\", linewidth = 0.01) +  # Base map (QLD Unit)\n  geom_sf(data = combined_species_sf, aes(fill = species), color = NA) +  # No borders for species\n  scale_fill_manual(values = RColorBrewer::brewer.pal(n = length(species_names), name = \"Set1\")) +  # Automatically assign colors\n  theme_minimal() +\n  labs(title = \"Species Habitats within QLD Unit\",\n       subtitle = paste(species_names, collapse = \", \")) +  # List all species in subtitle\n  theme(legend.title = element_blank())\n\n# Display the plot\nprint(combined_plot_with_unit)\n\n```\n\n**6. We can also make a species presence and absence csv table.**\n\n```{r ECR-sdm-csv, warning = FALSE, message=FALSE}\n\n# Function to extract presence (1) and absence (0) from raster based on a threshold (e.g., 0.5)\n\nextract_presence_absence <- function(raster_data, unit) {\n  extracted_values <- extract(raster_data, vect(unit), fun = mean, na.rm = TRUE)\n  presence_absence <- ifelse(extracted_values[, 2] >= 0.5, 1, 0)\n  return(presence_absence)\n}\n\n# Create an empty presence-absence data frame\npresence_absence_df <- data.frame(puid = QLD_Unit$puid)  # Assuming 'puid' is the unique identifier\n\n# Loop through each species raster in the raster list and extract presence-absence data\nfor (i in seq_along(raster_list)) {\n  # Generate a dynamic presence column name for the current species\n  presence_col_name <- paste0(species_names[i], \"_presence\")\n  \n  # Extract presence/absence data and add it to the presence-absence dataframe\n  presence_absence_df[[species_names[i]]] <- extract_presence_absence(raster_list[[i]], QLD_Unit)\n}\n\n# Write the final presence-absence data frame to a CSV file\noutput_csv <- file.path(output_dir, \"presence_absence_species.csv\")\nwrite.csv(presence_absence_df, output_csv, row.names = FALSE)\n\n# Check the CSV output\nprint(head(presence_absence_df))\n```\n\n## Marxan Four scenarios solutions:\n\n### Our SDMs input to Marxan MaPP:\n\n![EcoCommons SDMs output of three species on Marxan MaPP](qld_3species_Marxan/images/SDMs_EcoCommons.png){fig-align=\"center\"}\n\n### Scenario 1: No SDMs, No Costs\n\n![No Costs, neither SDMs](qld_3species_Marxan/images/No_Costs_No_SDMs.png){fig-align=\"center\"}\n\n### Scenario 2: SDMS, No Costs\n\n![SDMs only](qld_3species_Marxan/images/SDMs_only.png){fig-align=\"center\"}\n\n### Scenario 3: Costs, No SDMs\n\n![Costs only](qld_3species_Marxan/images/Cost_only.png){fig-align=\"center\"}\n\n### Scenario 4: SDMs + Costs\n\n![Costs and SDMs](qld_3species_Marxan/images/Cost_and_SDMs.png){fig-align=\"center\"}\n","srcMarkdownNoYaml":"\n\n# EcoCommons -\\> Marxan MaPP connection\n\nAuthor: Zhao Xiang, EcoCommons\n\nDate: 2024-10-02\n\n![](images/EC_section_break.png){fig-align=\"center\"}\n\n## Introduction\n\nUsing the Species distribution modeling techniques provided by the EcoCommons Platform (www.ecocommons.org.au), we produced probability distribution maps for the three Queensland endangered species: koala, brush tailed rock-wallaby, and beach stone curlew.\n\nThen we adjusted the probability distribution maps of these three species with the planning units shapefile prepared by the Marxan MaPP, and ran four planning scenarios with a target of expanding the coverage of protected areas in QLD to 30%.\n\n## EcoCommons Outputs\n\n1.  Species records pulled from GBIF, ALA, EcoPlots, OBIS\n2.  Species distribution modelling output: [Species distribution Probability maps]{style=\"color:red;\"} (This is the input tested in this project).\n\n## **Marxan MaPP Inputs**\n\n1.  Shapefile of planning area and units.\n2.  Shapefile of cost.\n3.  Shapefile and csv of biodiversity features [(Where EcoCommons can help!)]{style=\"color:red;\"}.\n\n## EcoCommons connects with Marxan Showcase:\n\n**Make sure you are in the directory you want**\n\n```{r start}\n\ngetwd()\n\n\n# setwd(“/replace_this_with_your_actual_directory/ecocommons-marxan-integration-poc”)\n\n```\n\nActivate the virtual environment \"renv\" to install and load all essential packages\n\n```{r init-renv, message=FALSE, results='hide'}\n\n# install \"renv\" package if not been installed\nif (!requireNamespace(\"renv\", quietly = TRUE)) {\n  install.packages(\"renv\")\n}\n\nif (!file.exists(\"renv/activate.R\")) {\n   message(\"renv has not been initiated in this project. Initializing now...\")\n   renv::init()  # This initializes renv if it's not set up\n} else {\n   source(\"renv/activate.R\")  # This ensures the renv environment is activated\n   message(\"renv is activated.\")\n}\n\n# Ensure renv is installed and initialized\nif (file.exists(\"renv.lock\")) {\n  renv::restore()\n} else {\n  message(\"No renv.lock file found in the current directory.\")\n}\n\n```\n\n**Install and load essential packages**\n\n```{r Pack-install, message=FALSE, results='hide'}\n\n# Set CRAN mirror\noptions(repos = c(CRAN = \"https://cran.rstudio.com/\"))\n\n# First specify the packages of interest\npackages = c(\"shiny\", \"sf\", \"terra\", \"ggplot2\", \"ggspatial\", \"raster\", \"dplyr\", \"shiny\", \"httpuv\", \"rmarkdown\", \"knitr\", \"jsonlite\", \"reticulate\", \"htmltools\", \"pryr\")\n\n# Now load or install&load all. This process will take a long time since we are using a virtual environment and install a lot of packages.\npackage.check <- lapply(\n  packages,\n  FUN = function(x) {\n    if (!require(x, character.only = TRUE)) {\n      install.packages(x, dependencies = TRUE)\n      library(x, character.only = TRUE)\n     }\n  }\n )\n\n\nSys.setenv(PROJ_LIB = \"/usr/local/Cellar/proj/9.5.0/share/proj\")\n\nrenv::snapshot()\n\n```\n\n**1. We get the QLD planning units from Marxan MaPP**\n\n```{r Plan-units, message=FALSE, results='hide'}\n\nQLD_Unit <- \"qld_3species_Marxan/QLD_plannningunits/cost-surface-template.shp\"  #This cost-surface-template was prepared by the Marxan Mapp with a resolution of 189 Km2, which is the highest resolution Marxan Mapp can give at this scale.\n\nQLD_Unit  <- st_read(QLD_Unit)\nQLD_Unit  <- st_simplify(QLD_Unit , dTolerance = 0.01) \n\n\n# Calculate the resolution since Marxan MaPP for visulization purpose\nareas <- st_area(QLD_Unit)\nareas_numeric <- as.numeric(areas)\naverage_area <- mean(areas_numeric)\n\n# Convert to numeric\naverage_area_km2 <- average_area / 1e6\n\n# Get the number of rows\nn_rows <- nrow(QLD_Unit)\n\n# Plot the shapefile with no fill color and number of rows in the title\nggplot(data = QLD_Unit) +\n  geom_sf(fill = NA, color = \"gray\") +\n  theme_minimal() +\n  ggtitle(paste(\"QLD Planning Units:\", n_rows, \"\\n\",\n                \"Resolution of planning in square kilometers:\", round(average_area_km2)))+\n  theme(plot.title = element_text(hjust = 0.5))  # Center the title\n```\n\n**2. I made a cost layer using the reciprocal of the distance to state-owned road as a surrogate of the cost.**\n\nThe assumption is: the closer to the state owned road, the more expensive to purchase the unit.\n\n```{r cost, message=FALSE, results='hide'}\n\nQLD_cost_road <- st_read(\"qld_3species_Marxan/QLD_Cost/QLD_cost_road.shp\")\n\n# Plot the shapefile with continuous cost_road values\nggplot(QLD_cost_road) +\n  geom_sf(aes(fill = cost_road)) +\n  scale_fill_continuous(name = \"Cost\",\n                        low = \"lightblue\", high = \"red\",\n                        labels = c(\"0 (Low cost)\", \"1 (High cost)\"),\n                        breaks = c(0.01, 1)) +\n  theme_minimal() +\n  labs(title = \"Cost: using the distance to road of each Unit as a proxy\")+\n  theme(plot.title = element_text(hjust = 0.5))  # Center the title\n\n```\n\n**3. Biodiversity features. I used EcoCommons to produce three species' SDM to start with.**\n\n-   **Species 1: koala**\n\n-   **Species 2: brush tailed rock-wallaby**\n\n-   **Species 3: beach stone curlew**\n\n```{r ECR-sdms-raster, warning = FALSE, message=FALSE, results='hide'}\n\n# Define the folder path where the rasters are stored\nfolder_path <- \"qld_3species_Marxan/QLD_feature/\"\n\n# Get a list of all .tif files in the folder\nraster_files <- list.files(path = folder_path, pattern = \"\\\\.tif$\", full.names = TRUE)\n\n# Extract the species names from the file names (removing the folder path and .tif extension)\nspecies_names <- tools::file_path_sans_ext(basename(raster_files))\n\n# Read all raster files in one go using lapply\nraster_list <- lapply(raster_files, rast)  # Use rast() from terra for reading rasters\n\n# Using QLD_Unit as the spatial vector for masking\n\n# Transform the raster CRS to match the vector CRS and apply masking in one step\nraster_list <- lapply(raster_list, function(r) {\n  r_transformed <- project(r, crs(vect(QLD_Unit)))\n  mask(r_transformed, vect(QLD_Unit))\n})\n\n# Function to convert rasters to data frames and combine them\nprepare_raster_data <- function(raster_list, species_names) {\n\n  # Initialize an empty data frame\n  combined_df <- data.frame()\n  # Loop through each raster and combine them into one data frame\n  for (i in seq_along(raster_list)) {\n    # Convert raster to a data frame\n    raster_df <- as.data.frame(raster_list[[i]], xy = TRUE)\n    # Rename the third column to 'value' or any appropriate name for the raster values\n    names(raster_df)[3] <- \"value\"\n    # Add a column to identify the species name\n    raster_df$species <- species_names[i]\n    # Combine the raster data with the overall data frame\n    combined_df <- bind_rows(combined_df, raster_df)\n}\n  return(combined_df)\n}\n\n# Prepare the combined data frame\ncombined_raster_df <- prepare_raster_data(raster_list, species_names)\n\n# Create the ggplot with facet_wrap to display each raster in a separate facet\nggplot(combined_raster_df, aes(x = x, y = y, fill = value)) +  # Use the correct column name for fill\n  geom_raster()+\n  facet_wrap(~ species, ncol = 3) +  # Adjust ncol to control the number of columns\n  scale_fill_viridis_c() +  # You can adjust the color scale as needed\n  labs(title = \"Species SDM\") +\n  theme_minimal() +\n  theme(plot.title = element_text(hjust = 0.5))\n\n```\n\n**4. We need to turn these SDMs to binary results (shapefies).**\n\n```{r threshold, warning = FALSE, message=FALSE, results='hide'}\n#| eval: false\n\n# Define the folder paths where the rasters and CSV files are stored\nfolder_path_rasters <- \"qld_3species_Marxan/QLD_feature/\"\nfolder_path_csvs <- \"qld_3species_Marxan/model_evaluation/\"\noutput_dir <- \"qld_3species_Marxan/QLD_feature/Marxan_feature_input/\"\n\nQLD_Unit <- \"qld_3species_Marxan/QLD_plannningunits/cost-surface-template.shp\"  #This cost-surface-template was prepared by the Marxan Mapp with a resolution of 189 Km2, which is the highest resolution Marxan Mapp can give at this scale.\n\nQLD_Unit  <- st_read(QLD_Unit)\nQLD_Unit  <- st_simplify(QLD_Unit , dTolerance = 0.01) \n\n\n# Get a list of all .tif files and CSV files in the folder\nraster_files <- list.files(path = folder_path_rasters, pattern = \"\\\\.tif$\", full.names = TRUE)\ncsv_files <- list.files(path = folder_path_csvs, pattern = \"\\\\.csv$\", full.names = TRUE)\n\n# Extract the species names from the file names (removing the folder path and .tif/.csv extension)\nspecies_names <- tools::file_path_sans_ext(basename(raster_files))\n\n# Read all raster files in one go using lapply\nraster_list <- lapply(raster_files, rast)  # Use rast() from terra for reading rasters\n\n# Transform the raster CRS to match the vector CRS and apply masking in one step\nraster_list <- lapply(raster_list, function(r) {\n  r_transformed <- project(r, crs(vect(QLD_Unit)))\n  mask(r_transformed, vect(QLD_Unit))\n})\n\n# Prepare a named list of rasters\nspecies_rasters <- setNames(raster_list, species_names)\nspecies_csvs <- setNames(csv_files, species_names)\n\n# Define UI for the application\nui <- fluidPage(\n  titlePanel(\"Interactive TSS-based threshold for the probability of presence and absence of Species\"),\n  \n  # Use a loop to create a row for each species\n  lapply(species_names, function(species) {\n    fluidRow(\n      column(3, \n             h4(paste(\"Species:\", species)),\n             sliderInput(paste0(\"tss_value_\", species), \n                         \"Select TSS Value:\", \n                         min = 0, max = 1, value = 0.5, step = 0.01),\n             actionButton(paste0(\"run_analysis_\", species), \"Run Species Analysis\"),\n             br(),\n             textOutput(paste0(\"tpr_tnr_\", species))\n      ),\n      \n      column(4, \n             plotOutput(paste0(\"plot_\", species), width = \"400px\")\n      ),\n      \n      column(5, \n             plotOutput(paste0(\"species_plot_\", species))\n      )\n    )\n  })\n)\n\n# Define server logic\nserver <- function(input, output, session) {\n  \n  selected_raster <- function(species) {\n    species_rasters[[species]]\n  }\n  \n  species_eval_data <- function(species) {\n    csv_path <- species_csvs[[species]]\n    \n    if (!file.exists(csv_path)) {\n      showNotification(paste(\"CSV file for\", species, \"not found!\"), type = \"error\")\n      return(NULL)\n    }\n    \n    eval_data <- read.csv(csv_path)\n    \n    if (!all(c(\"tpr\", \"tnr\", \"tpv\") %in% names(eval_data))) {\n      showNotification(paste(\"Required columns missing in CSV for\", species), type = \"error\")\n      return(NULL)\n    }\n    \n    if (nrow(eval_data) == 0) {\n      showNotification(paste(\"No data found in CSV for\", species), type = \"error\")\n      return(NULL)\n    }\n    \n    eval_data$tss <- round(eval_data$tpr + eval_data$tnr - 1, 3)\n    return(eval_data)\n  }\n  \n  lapply(species_names, function(species) {\n    eval_data <- species_eval_data(species)\n    \n    if (!is.null(eval_data)) {\n      min_tss <- min(eval_data$tss, na.rm = TRUE)\n      max_tss <- max(eval_data$tss, na.rm = TRUE)\n      \n      updateSliderInput(session, paste0(\"tss_value_\", species), \n                        min = min_tss, \n                        max = max_tss, \n                        value = max_tss,\n                        step = 0.01)\n    }\n    \n    observeEvent(input[[paste0(\"tss_value_\", species)]], {\n      if (!is.null(eval_data)) {\n        row <- which.min(abs(eval_data$tss - input[[paste0(\"tss_value_\", species)]]))\n        \n        tpr <- eval_data$tpr[row]\n        tnr <- eval_data$tnr[row]\n        \n        output[[paste0(\"tpr_tnr_\", species)]] <- renderText({\n          paste0(\"TPR (Sensitivity): \", round(tpr, 3), \n                 \", TNR (Specificity): \", round(tnr, 3))\n        })\n      }\n    })\n    \n    output[[paste0(\"plot_\", species)]] <- renderPlot({\n      if (is.null(eval_data)) return(NULL)\n      \n      ggplot(eval_data, aes(x = tpv)) +\n        geom_line(aes(y = tpr, colour = \"TPR\"), linewidth = 1) +\n        geom_line(aes(y = tnr, colour = \"TNR\"), linewidth = 1) +\n        geom_line(aes(y = tss, colour = \"TSS\"), linewidth = 1) +\n        geom_vline(xintercept = eval_data$tpv[which.min(abs(eval_data$tss - input[[paste0(\"tss_value_\", species)]]))],\n                   linetype = \"dotted\", color = \"red\", linewidth = 1) +\n        labs(title = paste(\"Sensitivity, Specificity, and TSS for\", species),\n             x = \"Threshold Probability Value\",\n             y = \"Value\") +\n        scale_colour_manual(values = c(\"TPR\" = \"blue\", \"TNR\" = \"green\", \"TSS\" = \"red\")) +\n        theme_minimal()\n    })\n    \n    observeEvent(input[[paste0(\"run_analysis_\", species)]], {\n      species_shp <- process_species(selected_raster(species), QLD_Unit, species, output_dir, input[[paste0(\"tss_value_\", species)]])\n      \n      output[[paste0(\"species_plot_\", species)]] <- renderPlot({\n        ggplot() +\n          geom_sf(data = QLD_Unit, fill = NA, color = \"grey\") +\n          geom_sf(data = species_shp, aes(fill = feature), color = NA) +\n          scale_fill_viridis_c(option = \"plasma\") +\n          labs(title = paste(\"Species Distribution for\", species),\n               x = \"Longitude\", y = \"Latitude\") +\n          theme_minimal()\n      })\n    })\n  })\n}\n\nprocess_species <- function(raster_data, planning_unit, species_name, output_dir, tss_threshold) {\n  raster_data_transformed <- project(raster_data, crs(vect(planning_unit)))\n  extracted_values <- extract(raster_data_transformed, vect(planning_unit), fun = mean, na.rm = TRUE)\n  names(planning_unit)[names(planning_unit) == \"cost\"] <- \"feature\"\n  planning_unit$feature <- extracted_values[, 2]\n  \n  QLD_species <- subset(planning_unit, feature >= tss_threshold)\n  shapefile_base <- file.path(output_dir, species_name)\n  st_write(QLD_species, paste0(shapefile_base, \".shp\"), delete_layer = TRUE)\n  \n  return(QLD_species)\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n```\n\n**5. Plot species SDM binary shapefile outputs for double check**\n\n```{r ECR-shp-plot, warning = FALSE, message=FALSE, results='hide'}\n\noutput_dir <- \"qld_3species_Marxan/QLD_feature/Marxan_feature_input/\"\n\n# List all the shapefiles in the directory (assuming each species has its own shapefile)\nspecies_files <- list.files(output_dir, pattern = \"\\\\.shp$\", full.names = TRUE)\n\nspecies_files\n\n# Extract species names from the filenames (you can adjust this depending on your naming conventions)\nspecies_names <- tools::file_path_sans_ext(basename(species_files))\n\n# Load all species shapefiles and add a species identifier\nspecies_sf_list <- lapply(seq_along(species_files), function(i) {\n  sf <- st_read(species_files[i])\n  sf$species <- species_names[i]  # Add species name column\n  return(sf)\n})\n\n# Combine all species into one dataset\ncombined_species_sf <- do.call(rbind, species_sf_list)\n\n# Plot the unit (base map) first and overlay the species habitats without borders\ncombined_plot_with_unit <- ggplot() +\n  geom_sf(data = QLD_Unit, fill = NA, color = \"grey\", linewidth = 0.01) +  # Base map (QLD Unit)\n  geom_sf(data = combined_species_sf, aes(fill = species), color = NA) +  # No borders for species\n  scale_fill_manual(values = RColorBrewer::brewer.pal(n = length(species_names), name = \"Set1\")) +  # Automatically assign colors\n  theme_minimal() +\n  labs(title = \"Species Habitats within QLD Unit\",\n       subtitle = paste(species_names, collapse = \", \")) +  # List all species in subtitle\n  theme(legend.title = element_blank())\n\n# Display the plot\nprint(combined_plot_with_unit)\n\n```\n\n**6. We can also make a species presence and absence csv table.**\n\n```{r ECR-sdm-csv, warning = FALSE, message=FALSE}\n\n# Function to extract presence (1) and absence (0) from raster based on a threshold (e.g., 0.5)\n\nextract_presence_absence <- function(raster_data, unit) {\n  extracted_values <- extract(raster_data, vect(unit), fun = mean, na.rm = TRUE)\n  presence_absence <- ifelse(extracted_values[, 2] >= 0.5, 1, 0)\n  return(presence_absence)\n}\n\n# Create an empty presence-absence data frame\npresence_absence_df <- data.frame(puid = QLD_Unit$puid)  # Assuming 'puid' is the unique identifier\n\n# Loop through each species raster in the raster list and extract presence-absence data\nfor (i in seq_along(raster_list)) {\n  # Generate a dynamic presence column name for the current species\n  presence_col_name <- paste0(species_names[i], \"_presence\")\n  \n  # Extract presence/absence data and add it to the presence-absence dataframe\n  presence_absence_df[[species_names[i]]] <- extract_presence_absence(raster_list[[i]], QLD_Unit)\n}\n\n# Write the final presence-absence data frame to a CSV file\noutput_csv <- file.path(output_dir, \"presence_absence_species.csv\")\nwrite.csv(presence_absence_df, output_csv, row.names = FALSE)\n\n# Check the CSV output\nprint(head(presence_absence_df))\n```\n\n## Marxan Four scenarios solutions:\n\n### Our SDMs input to Marxan MaPP:\n\n![EcoCommons SDMs output of three species on Marxan MaPP](qld_3species_Marxan/images/SDMs_EcoCommons.png){fig-align=\"center\"}\n\n### Scenario 1: No SDMs, No Costs\n\n![No Costs, neither SDMs](qld_3species_Marxan/images/No_Costs_No_SDMs.png){fig-align=\"center\"}\n\n### Scenario 2: SDMS, No Costs\n\n![SDMs only](qld_3species_Marxan/images/SDMs_only.png){fig-align=\"center\"}\n\n### Scenario 3: Costs, No SDMs\n\n![Costs only](qld_3species_Marxan/images/Cost_only.png){fig-align=\"center\"}\n\n### Scenario 4: SDMs + Costs\n\n![Costs and SDMs](qld_3species_Marxan/images/Cost_and_SDMs.png){fig-align=\"center\"}\n"},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../ec_html_template.css","ec_html_template.css"],"toc":true,"include-after-body":["../footer.html"],"embed-resources":true,"output-file":"ecocommons-marxan-integration-poc.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","editor":"visual","title":"EcoCommons Marxan MaPP connection","runtime":"shiny"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}